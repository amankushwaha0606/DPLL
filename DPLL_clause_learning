#include <bits/stdc++.h>

using namespace std;

enum Re turn_value
{
    r_satisfied,   
    r_unsatisfied, 
    r_normal       
};

class SATSolverCDCL
{
private:
    /*
     * a vector to store the state of each variable, where the assignment is as
     * 1 - true
     * 0 - false
     * -1 -unassigned
     */
    vector<int> literals;

    /*
     * a 2D vector that stores a list of literals for every clause
     * for the one indexed variable l, l is stored when it is present with
     * positive polarity and -l is stored when it is present with negative
     * polarity
     */
    vector<vector<int>> literal_list_per_clause;

    /*
     * vector that stores the total number of occurrences of the variable in the
     * formula this is updated when clauses are learnt this is used for choosing
     * the next variable to be assigned
     */
    vector<int> literal_frequency;

    /*
     * vector that stores the difference in the number of positive and negative
     * occurrences of the variable in the formula. this is updated when clauses
     * are learnt
     */
    vector<int> literal_polarity;

    /*
     * vector to store backup of the frequencies, as the original will be set to
     * -1 when the variable is assigned. this is use to reset the value back to
     * the original if and when the variable is later unassigned
     */
    vector<int> original_literal_frequency;
    int literal_count;    // number of variables in the formula
    int clause_count;     // number of clauses in the formula
    int kappa_antecedent; // antecedent of the conflict, kappa

    /*
     * vector to store the decision level of each variable
     * when not yet assigned, it contains -1
     */
    vector<int> literal_decision_level;

    /*
     * vector to store the antecedent of each variable
     * NIL is represented by -1
     */
    vector<int> literal_antecedent;
    int assigned_literal_count; // the number of variables assigned so far
    bool already_unsatisfied;   // if the formula contains any empty clause
                                // originally
    int pick_counter;           // the number of times we have chosen a variable freely
                                // based on frequency
    random_device random_generator;
    mt19937 generator;

    int unit_propagate(int); // to perform unit propagation
    // to assign a literal with given value, antecedent and decision level
    void assign_literal(int, int, int);
    void unassign_literal(int); // to unassign a given literal
                                // to convert the one indexed literal with sign to
                                // zero indexed without sign
    int literal_to_variable_index(int);
    int conflict_analysis_and_backtrack(
        int); // to perform conflict analysis and backtrack
    vector<int> &resolve(vector<int> &,
                         int);     // to resolve two clauses and get the result
    int pick_branching_variable(); // to pick the next free assignment
    bool all_variables_assigned(); // to check if all variables have already been
                                   // assigned
    void show_result(int);         // to display the result of the solver

public:
    SATSolverCDCL() : generator(random_generator()) {} // constructor
    void initialize();                                 // to initialize the solver
    int CDCL();                                        // to perform the CDCL algorithm and return the appropriate result
                                                       // state
    void solve();                                      // to solve the problem and display the result
};

/*
 * function to initialize the solver
 */
void SATSolverCDCL::initialize()
{

    cin >> literal_count;
    cin >> clause_count;
    assigned_literal_count = 0; // no literals assigned so far
    // set the default values
    kappa_antecedent = -1;
    pick_counter = 0;
    already_unsatisfied = false;
    // set the vectors to their appropriate sizes and initial values
    literals.clear();
    literals.resize(literal_count, -1); // give -1 for every literal
    literal_frequency.clear();
    literal_frequency.resize(literal_count, 0);
    literal_list_per_clause.clear();
    literal_list_per_clause.resize(clause_count);

    int literal;                     // store the incoming literal value
    int literal_count_in_clause = 0; // number of literals in the incoming clause
    // iterate over the clauses
    for (int i = 0; i < clause_count; i++)
    {
        literal_count_in_clause = 0;
        while (true) // while the ith clause gets more literals
        {
            cin >> literal;
            if (literal > 0) // if the variable has positive polarity
            {
                literal_list_per_clause[i].push_back(literal); // store it
                // increment frequency and polarity of the literal
                literal_frequency[literal - 1]++;
                // literal_polarity[literal - 1]++;
            }
            else if (literal < 0) // if the variable has negative polarity
            {
                literal_list_per_clause[i].push_back(literal); // store it
                // increment frequency and decrement polarity of the literal
                literal_frequency[-1 - literal]++;
                // literal_polarity[-1 - literal]--;
            }
            else
            {
                if (literal_count_in_clause == 0) // if any clause is empty, we can stop
                {
                    already_unsatisfied = true;
                }
                break; // read 0, so move to next clause
            }
            literal_count_in_clause++;
        }
    }
    original_literal_frequency = literal_frequency; // backup for restoring when backtracking
}

int SATSolverCDCL::unit_propagate(int decision_level)
{
    bool unit_clause_found = false; // if a unit clause has been found
    int false_count = 0;            // number of false literals in the clause
    int unset_count = 0;            // number of unset literals in the clause
    int literal_index;
    bool satisfied_flag = false; // if the clause is satisfied due to the presence of a true literal
    int last_unset_literal = -1; // index of an unset literal
    do
    {
        unit_clause_found = false;
        // iterate over all clauses if no unit clause has been found so far
        for (int i = 0; i < literal_list_per_clause.size() && !unit_clause_found;
             i++)
        {
            false_count = 0;
            unset_count = 0;
            satisfied_flag = false;
            // iterate over all literals
            for (int j = 0; j < literal_list_per_clause[i].size(); j++)
            {
                // get the vector index of the literal
                literal_index =
                    literal_to_variable_index(literal_list_per_clause[i][j]);
                if (literals[literal_index] == -1) // if unassigned
                {
                    unset_count++;
                    last_unset_literal = j; // store the index, may be needed later
                }
                else if ((literals[literal_index] == 0 &&
                          literal_list_per_clause[i][j] > 0) ||
                         (literals[literal_index] == 1 && literal_list_per_clause[i][j] < 0)) // if false in the clause
                {
                    false_count++;
                }
                else // if true in the clause, so the clause is satisfied
                {
                    satisfied_flag = true;
                    break;
                }
            }
            if (satisfied_flag) // if the clause is satisfied, move to the next
            {
                continue;
            }
            // if exactly one literal is unset, this clause is unit
            if (unset_count == 1)
            {
                // assign the unset literal at this decision level and this clause i as
                // the antecedent
                assign_literal(literal_list_per_clause[i][last_unset_literal],
                               decision_level, i);
                unit_clause_found =
                    true; // we have found a unit clause, so restart iteratin
                break;
            }
            // if the clause is unsatisfied
            else if (false_count == literal_list_per_clause[i].size())
            {
                // unsatisfied clause
                kappa_antecedent = i;               // set the antecedent of kappa to this clause
                return Return_value::r_unsatisfied; // return a conflict status
            }
        }
    } while (unit_clause_found); // if a unit clause was found, we restart
                                 // iterating over the clauses
    kappa_antecedent = -1;
    return Return_value::r_normal; // return normally
}


void SATSolverCDCL::assign_literal(int variable, int decision_level,
                                   int antecedent)
{
    int literal = literal_to_variable_index(variable); // get the index
    int value = (variable > 0) ? 1 : 0;                // choose the assignment based on sign
    literals[literal] = value;                         // assign
    literal_decision_level[literal] = decision_level;  // set decision level
    literal_antecedent[literal] = antecedent;          // set antecedent
    literal_frequency[literal] = -1;                   // unset frequency so this is not chosen for assignment again
    assigned_literal_count++; // increment the count of number of variables
                              // assigned
}

/*
 * function to unassign a variable
 * Arguments : literal_index - the index of the variable to unassign
 */
void SATSolverCDCL::unassign_literal(int literal_index)
{
    literals[literal_index] = -1;               // unassign value
    literal_decision_level[literal_index] = -1; // unassign decision level
    literal_antecedent[literal_index] = -1;     // unassign antecedent
    literal_frequency[literal_index] =
        original_literal_frequency[literal_index]; // restore frequency count
    assigned_literal_count--;                      // decrement the count of the number of variables
                                                   // assigned
}

/*
 * function to convert the one indexed signed form of the literal to the zero
 * indexed vector index Arguments : variable - the one indexed signed form
 * Return value : the zero indexed vector index
 */
int SATSolverCDCL::literal_to_variable_index(int variable)
{
    return (variable > 0) ? variable - 1 : -variable - 1;
}


/////////  * function to perform conflict analysis and backtrack
/////////  * Arguments : decision_level - the decision level of the conflict
////////  * Return value : the backtracked decision level

bool SATSolverCDCL::all_variables_assigned()
{
    return literal_count == assigned_literal_count;
}

void SATSolverCDCL::show_result(int result_status)
{
    if (result_status == Return_value::r_satisfied) // if the formula is satisfiable
    {
        cout << "SAT" << endl;
        for (int i = 0; i < literals.size(); i++)
        {
            if (i != 0)
            {
                cout << " ";
            }
            if (literals[i] != -1)
            {
                cout << pow(-1, (literals[i] + 1)) * (i + 1);
            }
            else // for literals which can take either value, arbitrarily assign
                 // them to be true
            {
                cout << (i + 1);
            }
        }
        cout << " 0";
    }
    else // if the formula is unsatisfiable
    {
        cout << "UNSATISFIABLE";
    }
}

void SATSolverCDCL::solve()
{
    int result_status = CDCL();
    show_result(result_status);
}

int main()
{
    SATSolverCDCL solver;
    solver.initialize();
    solver.solve();
    return 0;
}
